package edu.ucsb.cs56.S13.drawings.cmmorris.advanced;
import java.awt.geom.GeneralPath; // combinations of lines and curves
import java.awt.geom.AffineTransform; // translation, rotation, scale
import java.awt.Shape; // general class for shapes

// all imports below this line needed if you are implementing Shape
import java.awt.geom.Point2D; 
import java.awt.geom.Rectangle2D;
import java.awt.Rectangle;
import java.awt.geom.PathIterator;
import java.awt.geom.AffineTransform;

import edu.ucsb.cs56.S13.drawings.utilities.ShapeTransforms;
import edu.ucsb.cs56.S13.drawings.utilities.GeneralPathWrapper;

/**
   A Diamond (wrapper around a General Path, implements Shape)
   @author Christina Morris
   @author Phill Conrad 
   @version for CS56, W11, UCSB, 02/23/2011
   
*/
public class Diamond extends GeneralPathWrapper implements Shape
{
    double topX;
    double topY;
    double height;
    double width;
    
    /**
     * Constructor for objects of class Diamond
     */
    public Diamond(double x, double y, double width, double height)
    {
    
        // Specify the upper left corner, and the 
        //  width and height
        
        this.topX = x;
	this.topY = y;
	this.width = width;
	this.height = height;
                
        GeneralPath top = new GeneralPath();
      
        // top of diamond 
       
        top.moveTo(x + (width*.15), y);
        top.lineTo(x + (width*.85), y);
        top.lineTo(x + width, y + (height*.2));
        top.lineTo(x, y + (height*.2));
        top.lineTo(x + (width*.15), y);
        
        GeneralPath bottom = new GeneralPath();
       
        bottom.moveTo(x,y + (height * .2));
        bottom.lineTo(x + (width*.5), y + height); // 
        
        bottom.lineTo(x + width, y + (height*.2));
             
       
        // now we put the whole thing together ino a single path.
       
        GeneralPath wholeDiamond = new GeneralPath ();
        wholeDiamond.append(top, false);
        wholeDiamond.append(bottom, false);
      

        // translate to the origin by subtracting the original upper left x and y
        // then translate to (x,y) by adding x and y
        
	Shape s = ShapeTransforms.translatedCopyOf(wholeDiamond, -topX + x, -topY + y);
 
	// scale to correct height and width
	s =  ShapeTransforms.scaledCopyOf(s, width/this.width, height/this.height) ;
	 
	// Use the GeneralPath constructor that takes a shape and returns
	// it as a general path to set our instance variable cup
        
	this.set(new GeneralPath(s));
        
    }

}
