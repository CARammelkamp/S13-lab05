package edu.ucsb.cs56.S13.drawings.mlindsay.advanced;
import java.awt.geom.GeneralPath; // combinations of lines and curves
import java.awt.geom.AffineTransform; // translation, rotation, scale
import java.awt.Shape; // general class for shapes

// all imports below this line needed if you are implementing Shape
import java.awt.geom.Point2D; 
import java.awt.geom.Line2D; 
import java.awt.geom.Rectangle2D;
import java.awt.Rectangle;
import java.awt.geom.PathIterator;
import java.awt.geom.AffineTransform;
import java.awt.geom.Ellipse2D;

import edu.ucsb.cs56.S13.drawings.utilities.ShapeTransforms;
import edu.ucsb.cs56.S13.drawings.utilities.GeneralPathWrapper;

/**
   A vector drawing of a door that implements
   the Shape interface, and so can be drawn, as well as
   rotated, scaled, etc.
      
   @author Marc Lindsay 
   @version for CS56, Winter 11, UCSB
   
*/
public class Door extends GeneralPathWrapper implements Shape
{
     /**
       Constructor

       @param x x coord of lower left corner of door
       @param y y coord of lower left corner of door
       @param width width of door 
       @param height of door
     */

    public Door(double x, double y, double width, double height)
    {
    
        // Rather than having to scale at the end, we can just
        // draw things the right way to begin with, using the
        // x, y, width and height.   If you haven't already
        // hard coded a particular drawing, this may be an easier
        // way.
	double handle_x = x + width - (width/7);
	double handle_y = y + (width/2);
	double handle_radius = (width/20);

       	Ellipse2D door_handle =
	    new Ellipse2D.Double(handle_x,handle_y,handle_radius*2,handle_radius*2);
       
	Rectangle2D.Double door = 
            new Rectangle2D.Double(x,y,width,height);		

        //put the whole door together     
        GeneralPath wholeDoor = this.get();
        wholeDoor.append(door, false);
        wholeDoor.append(door_handle, false);
        }   
}
